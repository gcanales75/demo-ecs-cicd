AWSTemplateFormatVersion: 2010-09-09
Description: This template creates Containers CI/CD demo environment
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.100.0.0/16
      Tags:
        - Key: Name
          Value: VPC-CICD-DEMO
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref VPC
      CidrBlock: 10.100.0.0/24
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: public-subnet-1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      VpcId: !Ref VPC
      CidrBlock: 10.100.1.0/24
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: public-subnet-2
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref VPC
      CidrBlock: 10.100.2.0/24
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: private-subnet-1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-2b
      VpcId: !Ref VPC
      CidrBlock: 10.100.3.0/24
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: private-subnet-2
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGw
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  ElasticIp:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGw:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - ElasticIp
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  ContainersSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP traffic to containers
      GroupName: Containers-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  LbSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP traffic to LB
      GroupName: LoadBalancer-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  Ec2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: lab1-fargate-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Path: /
      Policies:
        - PolicyName: lab1-fargate-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:*'
                Resource: '*'
  Ec2InstProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: lab1-fargate-instanceprofile
      Roles:
        - !Ref Ec2InstanceRole
  EC2:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - PublicSubnet1
      - Ec2InstProfile
    Properties:
      ImageId: ami-07c8bc5c1ce9598c3
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref ContainersSg
          SubnetId: !Ref PublicSubnet1
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # https://aws.amazon.com/premiumsupport/knowledge-center/ec2-linux-log-user-data/
            yum update -y
            # Install Docker
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            chkconfig docker on
            # Download binaries
            cd /home/ec2-user
            curl -o cicdEcsDemo.zip https://ee-assets-prod-us-east-1.s3.us-east-1.amazonaws.com/modules/1e02727b109f4c969d33ada3c5fe18a6/v1/cicdEcsDemo.zip
            unzip cicdEcsDemo.zip
            # Build docker image
            docker build -t demo/ecs .
            # Create ECR repo
            aws ecr create-repository --repository-name ecs-demo --region us-east-2
            # Environment variables
            export AWS_DEFAULT_REGION=us-east-2
            export ACCOUNT_NUMBER=`aws sts get-caller-identity --query 'Account' --output text`
            export ECR_REPO_URI=`aws ecr describe-repositories --repository-names ecs-demo --query 'repositories[*].repositoryUri' --output text`
            # Authenticate to ECR repo
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ACCOUNT_NUMBER.dkr.ecr.us-east-2.amazonaws.com
            # Tag docker image
            docker tag demo/ecs $ECR_REPO_URI:v1
            # Push docker image to repo
            docker push $ECR_REPO_URI:v1
      Tags:
        - Key: Name
          Value: lab1-controller-instance
      IamInstanceProfile: lab1-fargate-instanceprofile
  ecsTaskExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ecsTaskExecRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: ipv4
      Name: demo-cicd
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LbSg
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: ECS-DEMO
  TD:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - name: demoEcs
          image: !Sub '${AWS::AccountId}.dkr.ecr.us-east-2.amazonaws.com/ecs-demo:v1'
          cpu: 0
          essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/ecs-demo-td
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 
        - ecsTaskExecRole
        - Arn
      Family: ecs-demo-td
      Memory: '512'
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      RequiresCompatibilities:
        - FARGATE
  CodeCommitDemoRepo:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      Code:
        S3:
          Bucket: ee-assets-prod-us-east-1
          Key: modules/1e02727b109f4c969d33ada3c5fe18a6/v1/cicdEcsDemo.zip
      RepositoryDescription: CI/CD with ECS demo repo
      RepositoryName: ecs-demo
  Cloud9DemoEnv:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    Properties:
      AutomaticStopTimeMinutes: 180
      Description: Cloud9 environment for CI/CD demo
      InstanceType: t2.micro
      Name: CICD-DEMO
      SubnetId: !Ref PublicSubnet1
  CodeBuildBasePolicyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CodeBuildBasePolicy-ecs-demo
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Path: /service-role/
      Policies:
        - PolicyName: CodeBuildBase-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - 'arn:aws:logs:us-east-2:*:log-group:*'
                  - 'arn:aws:logs:us-east-2:*:log-group:*:*'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
              - Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                Resource: '*'
                Effect: Allow
              - Effect: Allow
                Resource:
                  - 'arn:aws:logs:us-east-2:*:log-group:/aws/codebuild/*'
                  - 'arn:aws:logs:us-east-2:*:log-group:/aws/codebuild/*:*'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
              - Effect: Allow
                Resource:
                  - 'arn:aws:s3:::codepipeline-us-east-2-*'
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
              - Effect: Allow
                Resource:
                  - 'arn:aws:codecommit:us-east-2:*:ecs-demo'
                Action:
                  - 'codecommit:GitPull'
              - Effect: Allow
                Action:
                  - 'codebuild:CreateReportGroup'
                  - 'codebuild:CreateReport'
                  - 'codebuild:UpdateReport'
                  - 'codebuild:BatchPutTestCases'
                  - 'codebuild:BatchPutCodeCoverages'
                Resource:
                  - 'arn:aws:codebuild:us-east-2:*:report-group/ecs-demo-*'
              - Sid: VisualEditor0
                Effect: Allow
                Action: 'sts:GetCallerIdentity'
                Resource: '*'
  logGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /ecs/ecs-demo-td
Outputs:
  LoadBalancerDns:
    Description: ALB DNS NAME
    Value: !GetAtt 
      - ALB
      - DNSName
